/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package OCRS;

import java.io.BufferedReader;
import java.io.FileReader;
import java.io.FileWriter;
import javax.swing.JOptionPane;

/**
 *
 * @author Bryan Low
 */
public class Checkout_Page extends javax.swing.JFrame {

    /**
     * Creates new form Checkout_Page
     */
    public Checkout_Page() {
        initComponents();
    }
    public Checkout_Page(String uname, String courses, String page) {
        initComponents();
        String[] temp;
        String[] course;
        String reader;
        int total = 0;
        try{
            FileReader fr = new FileReader("Student_Profile_DB.txt");
            BufferedReader br = new BufferedReader(fr);
            reader = br.readLine();
            while (reader.length() != 0) {
                temp = reader.split(",");
                if (uname.equals(temp[4])) {
                    page_lbl.setText(page);
                    page_lbl.setVisible(false);                    
                    usr_lbl.setText(uname);
                    degree_lbl.setText(temp[2]);
                    br.close();
                    fr.close();                    
                    break;
                }
                reader = br.readLine();
                if ("testnull".equals(reader)){
                    System.out.println("This should not occur, only to handle NullPointerException.");
                }
                else{
                    if(reader == null){
                        br.close();
                        fr.close();                        
                        break;
                    }
                }                
            }
        }
        catch (Exception f) {
            JOptionPane.showMessageDialog(null, "Error setting labels " + f);
        }

        course = courses.split(",");
        int course_size = course.length;
        try{
            FileReader fr2 = new FileReader ("Course_List.txt");
            BufferedReader br2 = new BufferedReader(fr2);
            reader = br2.readLine();
            int i = 0, j = 0;
            if ("testnull".equals(reader)){
                System.out.println("This should not occur, only to handle NullPointerException.");
            }
            else{
                if (reader == null){
                    br2.close();
                    fr2.close();
                    return;
                }
                else{
                    while (reader.length() != 0) {
                        temp = reader.split(",");
                        for (int k = 0;k < course_size;k++){
                            if (course[k].equals(temp[1])) {
                                course_t.setValueAt(temp[0], i, j);
                                course_t.setValueAt(temp[1], i, j+1);
                                course_t.setValueAt(temp[4], i, j+2);
                                total = total + Integer.valueOf(temp[4]);
                                i++;
                            }
                        }
                        reader = br2.readLine();
                        if ("testnull".equals(reader)){
                            System.out.println("This should not occur, only to handle NullPointerException.");
                        }
                        else if(reader == null){
                            br2.close();
                            fr2.close();
                            break;
                        }
                    }
                }
            }                
        }
        catch (Exception f) {
            JOptionPane.showMessageDialog(null, "Error listing course selection " + f);
        }
        total_lbl.setText(Integer.toString(total));
    }
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        back_b = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        course_t = new javax.swing.JTable();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        degree_lbl = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();
        usr_lbl = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        total_lbl = new javax.swing.JLabel();
        page_lbl = new javax.swing.JLabel();
        purc_b = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        back_b.setText("Back");
        back_b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                back_bActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CONFIRM PAYMENT");

        course_t.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"No courses selected yet", " ", null},
                {" ", " ", null},
                {" ", " ", null},
                {" ", " ", null},
                {" ", " ", null},
                {" ", " ", null},
                {" ", " ", null},
                {" ", " ", null}
            },
            new String [] {
                "Course", "Course Code", "Price ($)"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Integer.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(course_t);
        if (course_t.getColumnModel().getColumnCount() > 0) {
            course_t.getColumnModel().getColumn(2).setResizable(false);
            course_t.getColumnModel().getColumn(2).setPreferredWidth(5);
        }

        jLabel6.setText("Username:");

        jLabel5.setText("Selected courses:");

        degree_lbl.setText("(Degree will be replaced here)");

        jLabel10.setText("Degree:");

        usr_lbl.setText("(Username will be replaced here)");

        jLabel2.setText("TOTAL DUE:");

        total_lbl.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        total_lbl.setText("(total)");

        page_lbl.setText("(placeholder for page)");

        purc_b.setText("Purchase");
        purc_b.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                purc_bActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(69, 69, 69)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel10)
                            .addComponent(jLabel6))
                        .addGap(32, 32, 32)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(degree_lbl)
                            .addComponent(usr_lbl)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(55, 55, 55)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 348, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(page_lbl)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(37, 37, 37)
                        .addComponent(total_lbl)
                        .addGap(86, 86, 86))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(purc_b, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(back_b, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(130, 130, 130))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(page_lbl)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(usr_lbl))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel10)
                    .addComponent(degree_lbl))
                .addGap(18, 18, 18)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(total_lbl))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(back_b)
                    .addComponent(purc_b))
                .addGap(22, 22, 22))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void back_bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_back_bActionPerformed
        String uname = usr_lbl.getText(), page = page_lbl.getText();
        int i = 0, j = 1;
        String course, courses = "";
        while(true){
            course = course_t.getValueAt(i, j).toString();
            if (!course.equals(" ")){
                courses = courses + course + ",";
                i++;
            }
            else{
                break;
            }
        }
        //Remove last character of courses which is "," to avoid arrayoutofboundsexception 2
        //Ex: OODJ,PDT, will create an array of 3 indexes as it's split by ","        
        courses = courses.substring(0, courses.length() - 1);
        Stud_enrollcourse sec = new Stud_enrollcourse(uname, courses, page);
        sec.setVisible(true);
        this.dispose();
        return;
    }//GEN-LAST:event_back_bActionPerformed

    private void purc_bActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_purc_bActionPerformed
        String uname = usr_lbl.getText(),reader,course,courses ="",registered ="";
        String[] temp;
        String[] courselist;
        String line_sep = System.lineSeparator();
        
        int i = 0,j = 1;
        try{
            FileWriter fw = new FileWriter("Enrollment_List.txt", true);
            FileWriter fw2 = new FileWriter("Billing_List.txt", true);
            FileReader fr = new FileReader("Enrollment_List.txt");
            FileReader fr2 = new FileReader("Course_List.txt");
            BufferedReader br = new BufferedReader(fr);
            BufferedReader br2 = new BufferedReader(fr2);
            while(true){
                course = course_t.getValueAt(i, j).toString();
                if (!course.equals(" ")){
                    courses = courses + course + ",";
                    i++;
                }
                else{
                    break;
                }
            }
            courses = courses.substring(0, courses.length() - 1);
            courselist = courses.split(",");
            int coursesize = courselist.length;
            reader = br.readLine();
            if ("testnull".equals(reader)){
                System.out.println("This should not occur, only to handle NullPointerException.");
            }
            else{
                if (reader == null){
                    br.close();
                    fr.close();                     
                    //If courselist value is registered, ignore. else write to enrollment and billing list.
                    reader = br2.readLine();
                    Receipt_Num_Generator rng = new Receipt_Num_Generator();
                    String receipt_num = rng.getReceiptNumber();
                    while(reader.length() != 0){
                        temp =  reader.split(",");
                        for (int k = 0; k < coursesize; k++){
                            if(courselist[k].equals(temp[1])){
                                fw.write(uname+","+temp[0]+","+temp[1]+","+temp[4]+line_sep);
                                fw2.write(uname+","+receipt_num+","+temp[0]+","+temp[1]+","+temp[4]+line_sep);
                            }
                        }
                        reader = br2.readLine();
                        if ("testnull".equals(reader)){
                            System.out.println("This should not occur, only to handle NullPointerException.");
                        }
                        else{
                            if(reader == null){
                                fw.close();
                                fw2.close();
                                br2.close();
                                fr2.close();                        
                                break;
                            }
                        }                          
                    }
                    fw.close();
                    fw2.close();
                    br2.close();
                    fr2.close(); 
                    JOptionPane.showMessageDialog(null, "Purchase successful!");
                    Stud_vProfile svp = new Stud_vProfile(uname);
                    svp.setVisible(true);
                    this.dispose();
                    return;                    
                }
                else{
                    while (reader.length() != 0) {
                        temp = reader.split(",");
                        if(uname.equals(temp[0])){
                            for(int k = 0; k < coursesize; k++){
                                //If course already exists, ignore this course and 
                                if(courselist[k].equals(temp[2])){
                                    registered = registered + temp[2] + ",";
                                    courselist[k] = "registered";
                                }
                            }
                        }
                        reader = br.readLine();
                        if ("testnull".equals(reader)){
                            System.out.println("This should not occur, only to handle NullPointerException.");
                        }
                        else{
                            if(reader == null){
                                br.close();
                                fr.close();                        
                                break;
                            }
                        }                          
                    }
                    br.close();
                    fr.close();                     
                    //If courselist value is registered, ignore. else write to enrollment and billing list.
                    reader = br2.readLine();
                    Receipt_Num_Generator rng = new Receipt_Num_Generator();
                    String receipt_num = rng.getReceiptNumber();
                    while(reader.length() != 0){
                        temp =  reader.split(",");
                        for (int k = 0; k < coursesize; k++){
                            if(courselist[k].equals(temp[1])){
                                fw.write(uname+","+temp[0]+","+temp[1]+","+temp[4]+line_sep);
                                fw2.write(uname+","+receipt_num+","+temp[0]+","+temp[1]+","+temp[4]+line_sep);
                            }
                        }
                        reader = br2.readLine();
                        if ("testnull".equals(reader)){
                            System.out.println("This should not occur, only to handle NullPointerException.");
                        }
                        else{
                            if(reader == null){
                                fw.close();
                                fw2.close();
                                br2.close();
                                fr2.close();                        
                                break;
                            }
                        }                          
                    }
                    fw.close();
                    fw2.close();
                    br2.close();
                    fr2.close(); 
                    if (registered.length() != 0){
                        registered = registered.substring(0, registered.length() - 1);
                        if(registered.equals(courses)){
                            JOptionPane.showMessageDialog(null, "Purchase unsuccessful!"+line_sep+"Already enrolled course(s):"+line_sep+registered, "Error!", JOptionPane.ERROR_MESSAGE);
                            Stud_vProfile svp = new Stud_vProfile(uname);
                            svp.setVisible(true);
                            this.dispose();
                            return;                            
                        }
                        else{
                            JOptionPane.showMessageDialog(null, "Purchase successful!"+line_sep+"Already enrolled course(s):"+line_sep+registered);
                            Stud_vProfile svp = new Stud_vProfile(uname);
                            svp.setVisible(true);
                            this.dispose();
                            return;
                        }
                    }
                    else{
                        JOptionPane.showMessageDialog(null, "Purchase successful!");
                        Stud_vProfile svp = new Stud_vProfile(uname);
                        svp.setVisible(true);
                        this.dispose();
                        return;                    
                    }
                }
            }
        }
        catch (Exception f) {
            JOptionPane.showMessageDialog(null, "System error " + f);
        }        
    }//GEN-LAST:event_purc_bActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Checkout_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Checkout_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Checkout_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Checkout_Page.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Checkout_Page().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton back_b;
    private javax.swing.JTable course_t;
    private javax.swing.JLabel degree_lbl;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel page_lbl;
    private javax.swing.JButton purc_b;
    private javax.swing.JLabel total_lbl;
    private javax.swing.JLabel usr_lbl;
    // End of variables declaration//GEN-END:variables
}
