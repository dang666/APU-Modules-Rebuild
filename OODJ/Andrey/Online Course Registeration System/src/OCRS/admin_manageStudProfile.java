/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package OCRS;

import java.awt.Font;
import java.awt.font.TextAttribute;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.nio.file.DirectoryNotEmptyException;
import java.nio.file.Files;
import java.nio.file.NoSuchFileException;
import java.nio.file.Paths;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author audrey
 */
public class admin_manageStudProfile extends javax.swing.JFrame {

    /**
     * Creates new form admin_manageStudProfile
     */
    public admin_manageStudProfile() {
        initComponents();
    }
    private String uname;
    private String s_uName;
    
    public admin_manageStudProfile(String uname, String s_uName) {
        initComponents();
        usr_label.setText(uname);
        usr_label.setVisible(false);
        this.uname = uname;
        s_uNameLabel.setText(s_uName);
        this.s_uName = s_uName;
        String reader;
        String []temp;
        try{
            FileReader fr = new FileReader("Student_Profile_DB.txt");
            BufferedReader br = new BufferedReader(fr);
            reader = br.readLine();
            
            while(reader.length()!=0) {
                temp = reader.split(",");
                if(s_uName.equals(temp[4])) {
                    nameText.setText(temp[0]);
                    idText.setText(temp[1]);
                    degreeComboBox.setSelectedItem(temp[2]);
                    levelComboBox.setSelectedItem(temp[3]);
                    br.close();
                    fr.close();
                    break;
                }
                reader = br.readLine();
                if ("testnull".equals(reader)){
                    System.out.println("This should not occur, only to handle NullPointerException.");
                }
                else if(reader == null){
                    br.close();
                    fr.close();
                    break;
                }
            }
            br.close();
            fr.close();            
        }
        catch(Exception e) {
            JOptionPane.showMessageDialog(null, "File Not Found" + e);
        }
        try{
            FileReader fr = new FileReader ("Enrollment_List.txt");
            BufferedReader br = new BufferedReader(fr);
            reader = br.readLine();
            int i = 0, j = 0;
            if ("testnull".equals(reader)){
                System.out.println("This should not occur, only to handle NullPointerException.");
            }
            else{
                if (reader == null){
                    br.close();
                    fr.close();
                    return;
                }
                else{
                    while (reader.length() != 0) {
                        temp = reader.split(",");
                        if (s_uName.equals(temp[0])) {
                            course_t1.setValueAt(temp[1], i, j);
                            course_t1.setValueAt(temp[2], i, j+1);
                            i++;
                        }
                        reader = br.readLine();
                        if ("testnull".equals(reader)){
                            System.out.println("This should not occur, only to handle NullPointerException.");
                        }
                        else if(reader == null){
                            br.close();
                            fr.close();
                            return;
                        }                
                    }
                    br.close();
                    fr.close();                    
                }
            }
        } catch (Exception f) {
            JOptionPane.showMessageDialog(null, "System error " + f);
        }
        for (int k = course_t1.getRowCount() - 1; k >= 0; k--){
            if (course_t1.getValueAt(k, 1).equals(" ")){
                int viewIndex = k;
                int modelIndex = course_t1.convertRowIndexToModel(viewIndex);
                DefaultTableModel model = (DefaultTableModel)course_t1.getModel();
                model.removeRow(modelIndex);
            }
        }        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        backMainLabel = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        degreeComboBox = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        idText = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        nameText = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        levelComboBox = new javax.swing.JComboBox<>();
        manageButton = new javax.swing.JButton();
        cancelButton = new javax.swing.JButton();
        backLabel = new javax.swing.JLabel();
        s_uNameLabel = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        deleteButton = new javax.swing.JButton();
        usr_label = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        course_t1 = new javax.swing.JTable();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Thonburi", 0, 14)); // NOI18N
        jLabel1.setText("S T U D E N T   P R O F I L E   ");

        backMainLabel.setText("Back to Main Menu");
        backMainLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backMainLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backMainLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backMainLabelMouseEntered(evt);
            }
        });

        jLabel3.setText("NAME");

        degreeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Degree . . . ", "BSc (Hons) Computer Science", "BSc (Hons) Software Engineering", "BSc (Hons) Cyber Security", "BSc (Hons) Intelligent Systems", " ", " ", " " }));

        jLabel4.setText("Student ID");

        jLabel5.setText("Degree");

        jLabel6.setText("Username");

        jLabel9.setText("Level");

        levelComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Select Level . . . ", "Level 1", "Level 2", "Level 3" }));

        manageButton.setText("Save Changes");
        manageButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                manageButtonActionPerformed(evt);
            }
        });

        cancelButton.setText("Cancel");
        cancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cancelButtonActionPerformed(evt);
            }
        });

        backLabel.setText("Back");
        backLabel.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                backLabelMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                backLabelMouseExited(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                backLabelMouseEntered(evt);
            }
        });

        s_uNameLabel.setText("(username will be replaced here)");

        jLabel12.setText("Username cannot be edit.");

        deleteButton.setText("Delete");
        deleteButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteButtonActionPerformed(evt);
            }
        });

        usr_label.setText("(placeholder for admin username)");

        course_t1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"No courses registered yet", " ", null},
                {" ", " ", null},
                {" ", " ", null},
                {" ", " ", null},
                {" ", " ", null},
                {" ", " ", null},
                {" ", " ", null},
                {" ", null, null}
            },
            new String [] {
                "Course", "Course Code", "Select"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                true, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        course_t1.setColumnSelectionAllowed(true);
        jScrollPane2.setViewportView(course_t1);
        course_t1.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.MULTIPLE_INTERVAL_SELECTION);
        if (course_t1.getColumnModel().getColumnCount() > 0) {
            course_t1.getColumnModel().getColumn(0).setPreferredWidth(150);
            course_t1.getColumnModel().getColumn(2).setResizable(false);
            course_t1.getColumnModel().getColumn(2).setPreferredWidth(3);
        }

        jLabel10.setText("Remove registered courses:");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(usr_label)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(backLabel)
                        .addGap(18, 18, 18)
                        .addComponent(backMainLabel)))
                .addContainerGap())
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(cancelButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(deleteButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(manageButton))
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 439, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel10)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel4)
                            .addComponent(jLabel3)
                            .addComponent(jLabel9))
                        .addGap(77, 77, 77)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel12)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                .addComponent(degreeComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(idText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(nameText, javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(levelComboBox, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(s_uNameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(7, 7, 7)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(backMainLabel)
                    .addComponent(backLabel)
                    .addComponent(usr_label))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(nameText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(idText, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(degreeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel9)
                    .addComponent(levelComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 21, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(s_uNameLabel))
                .addGap(1, 1, 1)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 12, Short.MAX_VALUE)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(manageButton)
                    .addComponent(cancelButton)
                    .addComponent(deleteButton))
                .addContainerGap())
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void cancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cancelButtonActionPerformed
        // TODO add your handling code here:
        admin_mProfile_mMenu mp = new admin_mProfile_mMenu(uname);
        mp.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_cancelButtonActionPerformed

    private void backMainLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMainLabelMouseClicked
        // TODO add your handling code here:
        admin_mMenu m = new admin_mMenu(uname);
        m.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backMainLabelMouseClicked

    private void backMainLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMainLabelMouseEntered
        // TODO add your handling code here:
        Font original = evt.getComponent().getFont();
        Map attributes = original.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        evt.getComponent().setFont(original.deriveFont(attributes));
    }//GEN-LAST:event_backMainLabelMouseEntered

    private void backMainLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backMainLabelMouseExited
        // TODO add your handling code here:
        Font original = evt.getComponent().getFont();
        Map attributes = original.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, -1);
        evt.getComponent().setFont(original.deriveFont(attributes));
    }//GEN-LAST:event_backMainLabelMouseExited

    private void backLabelMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backLabelMouseClicked
        // TODO add your handling code here:
        admin_mProfile_mMenu amm = new admin_mProfile_mMenu(uname);
        amm.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_backLabelMouseClicked

    private void backLabelMouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backLabelMouseEntered
        // TODO add your handling code here:
        Font original = evt.getComponent().getFont();
        Map attributes = original.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
        evt.getComponent().setFont(original.deriveFont(attributes));
    }//GEN-LAST:event_backLabelMouseEntered

    private void backLabelMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_backLabelMouseExited
        // TODO add your handling code here:
        Font original = evt.getComponent().getFont();
        Map attributes = original.getAttributes();
        attributes.put(TextAttribute.UNDERLINE, -1);
        evt.getComponent().setFont(original.deriveFont(attributes));
    }//GEN-LAST:event_backLabelMouseExited

    private void manageButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_manageButtonActionPerformed
        // TODO add your handling code here:
        File oldFile = new File("Student_Profile_DB.txt");
        File newTempfile = new File("temp_Student_Profile_DB.txt");
        File replaceFile = new File("Student_Profile_DB.txt");
        String[] temp;
        String oldStr, newStr;
        String line_sep = System.lineSeparator();
        String reader;
        
        String name = nameText.getText();
        String id = idText.getText();
        String degree = degreeComboBox.getSelectedItem().toString();
        String level = levelComboBox.getSelectedItem().toString();
        
        try{
            FileWriter fw = new FileWriter(newTempfile, true);
            FileReader fr = new FileReader(oldFile);
            BufferedReader br = new BufferedReader(fr);
            reader = br.readLine();
            while(reader.length()!=0) {
                temp = reader.split(",");
                if(s_uName.equals(temp[4])) {
                    if(!name.equals(temp[0])) {
                        oldStr = temp[0];
                        newStr = name;
                        reader=reader.replaceAll(oldStr, newStr);
                    }
                    if(!id.equals(temp[1])) {
                        oldStr = temp[1];
                        newStr = id;
                        reader=reader.replaceAll(oldStr, newStr);
                    }
                    if(!degree.equals(temp[2])) {
                        System.out.println("degree "+degree);
                        System.out.println("test 1 "+reader);
                        oldStr = temp[2];
                        newStr = degree;
                        reader=reader.replace(oldStr, newStr);
                        System.out.println("test 2 "+reader);
                    }
                    if(!level.equals(temp[3])) {
                        oldStr = temp[3];
                        newStr = level;
                        reader=reader.replaceAll(oldStr, newStr);
                    }
                    fw.write(reader);
                    fw.write(line_sep);
                    reader = br.readLine();
                    if ("testnull".equals(reader)){
                        System.out.println("This should not occur, only to handle NullPointerException.");
                    }
                    else if (reader == null){
                        fw.close();
                        br.close();
                        fr.close();                        
                        break;                                
                    }
                    else{
                        continue;
                    }                    
                }
                fw.write(reader);
                fw.write(line_sep);
                reader = br.readLine();
                
                if ("testnull".equals(reader)){
                    System.out.println("This should not occur, only to handle NullPointerException.");
                }
                else if (reader == null){
                    fw.close();
                    br.close();
                    fr.close();                        
                    break;
                }
            }
            fw.close();
            br.close();
            fr.close();              
        } 
        catch(Exception f) {
            System.out.println(f);
            f.printStackTrace();
        }
        try{
            Files.deleteIfExists(Paths.get("Student_Profile_DB.txt"));
            newTempfile.renameTo(replaceFile);
        }
        catch(NoSuchFileException e) 
        { 
            JOptionPane.showMessageDialog(null, "No such file/directory exists " + e);
        } 
        catch(DirectoryNotEmptyException e) 
        { 
            JOptionPane.showMessageDialog(null, "Directory is not empty " + e);
        } 
        catch(IOException e) 
        { 
            JOptionPane.showMessageDialog(null, "Invalid permissions " + e);
        }
        
        /*UNREGISTER SELECTED ENROLLED COURSES*/
        //Assign selected courses into an array.
        String course, courses = "";
        int k = 0;
        try{
            while (k < course_t1.getRowCount()){
                String select = String.valueOf(course_t1.getValueAt(k, 2));
                if ("testnull".equals(select)){
                    System.out.println("This should not occur, only to handle NullPointerException.");
                }
                else{
                    if (select.equals("null") || select.equals("false")){
                        k++;
                    }                
                    else if(select.equals("true")){
                        course = course_t1.getValueAt(k, 1).toString();
                        courses = courses + course + ",";
                        k++;
                    }
                }
            }
            
            //Compare courses in array to enrollment list, if matches then unregister course.
            File oldFile2 = new File("Enrollment_List.txt");
            File newTempfile2 = new File("temp_Enrollment_List.txt");
            File replaceFile2 = new File("Enrollment_List.txt");
            
            if(!courses.equals("")){
                //Remove last character from courses string, which is a ",", for splitting into array later on.
                courses = courses.substring(0, courses.length() - 1);            
                String[] temp2 = courses.split(",");
                int arraysize = temp2.length;
                try{
                    FileReader fr = new FileReader(oldFile2);
                    BufferedReader br = new BufferedReader(fr);
                    FileWriter fw = new FileWriter (newTempfile2, true);

                    //Reading all the lines of input text file into Content
                    reader = br.readLine();
                    while (reader.length() != 0){
                        int h = 0;
                        temp = reader.split(",");
                        //IF username matches, check whether this course needs to be deleted;
                        //ELSE write to temp file and read next line.
                        if (s_uName.equals(temp[0])){
                            for(int i=0 ; i < arraysize ; i++){
                                //If course code matches course to delete then set "h" value to 1.
                                if (temp[2].equals(temp2[i])){
                                    h = 1;
                                    String replace = temp2[i];
                                    temp2[i] = temp2[i].replaceAll(replace, "deleted");
                                }
                            }
                            //If "h" value is 1, ignore/delete course and continue.
                            if(h == 1){
                                reader = br.readLine();
                                if ("testnull".equals(reader)){
                                    System.out.println("This should not occur, only to handle NullPointerException.");
                                }
                                else if (reader == null){
                                    fw.close();
                                    br.close();
                                    fr.close();                        
                                    break;                                
                                }
                                else{
                                    continue;
                                }                        
                            }
                            else if (h == 0){
                                //If "h" value remains as 0, keep the course and continue.
                                fw.write(reader);
                                fw.write(line_sep);                    
                                reader = br.readLine();
                                if ("testnull".equals(reader)){
                                    System.out.println("This should not occur, only to handle NullPointerException.");
                                }
                                else if (reader == null){
                                    fw.close();
                                    br.close();
                                    fr.close();                        
                                    break;                                
                                }
                                else{
                                    continue;
                                }
                            }
                        }
                        fw.write(reader);
                        fw.write(line_sep);
                        reader = br.readLine();
                        if ("testnull".equals(reader)){
                            System.out.println("This should not occur, only to handle NullPointerException.");
                        }
                        else if (reader == null){
                            fw.close();
                            br.close();
                            fr.close();                        
                            break;                                
                        }
                    }
                    fw.close();
                    br.close();
                    fr.close();                 
                }
                catch (Exception rem){
                    JOptionPane.showMessageDialog(null, "Error in removing course(s) " + rem);            
                }
                try{
                    Files.deleteIfExists(Paths.get("Enrollment_List.txt"));
                    newTempfile2.renameTo(replaceFile2);
                }
                catch(NoSuchFileException e) 
                { 
                    JOptionPane.showMessageDialog(null, "No such file/directory exists " + e);
                } 
                catch(DirectoryNotEmptyException e) 
                { 
                    JOptionPane.showMessageDialog(null, "Directory is not empty " + e);
                } 
                catch(IOException e) 
                { 
                    JOptionPane.showMessageDialog(null, "Invalid permissions " + e);
                }
            }
            else{
                JOptionPane.showMessageDialog(null, "No course(s) selected to unregister.");
            }            
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Unable to delete selected course(s) "+e, "Error!", JOptionPane.ERROR_MESSAGE);
        }        
        finally{
            JOptionPane.showMessageDialog(null,"You have successfully made changes.");            
            admin_viewStudProfile vsp = new admin_viewStudProfile(uname);
            vsp.setVisible(true);
            this.dispose();
        }
    }//GEN-LAST:event_manageButtonActionPerformed

    private void deleteButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteButtonActionPerformed
        /*DELETE STUDENT RECORD FROM PROFILE DATABASE AND ENROLLMENT LIST*/
        File oldFile = new File("Student_Profile_DB.txt");
        File newTempfile = new File("temp_Student_Profile_DB.txt");
        File replaceFile = new File("Student_Profile_DB.txt");
        String reader, line_sep = System.lineSeparator();
        String[] temp;
        
        //Delete from Student_Profile_DB.txt
        try{
            
            //Display confirm message.
            int return_opt = 0;
            return_opt = JOptionPane.showConfirmDialog(null, "Confirm delete student profile?", "WARNING", JOptionPane.OK_CANCEL_OPTION);

            //If confirm delete, proceed to delete courses.
            if(return_opt == JOptionPane.OK_OPTION){
                FileReader fr = new FileReader(oldFile);
                BufferedReader br = new BufferedReader(fr);
                FileWriter fw = new FileWriter (newTempfile, true);
                reader = br.readLine();
                while (reader.length() != 0){

                    //Use variable h as a flag.
                    int h = 0;
                    temp = reader.split(",");

                    //If Username matches Username to delete in Student_Profile_DB.txt, then set "h" value to 1.
                    if (temp[4].equals(s_uName)){
                        h = 1;
                    }

                    //If "h" value is 1, ignore/delete username.
                    if(h == 1){
                        reader = br.readLine();
                        if ("testnull".equals(reader)){
                            System.out.println("This should not occur, only to handle NullPointerException.");
                        }
                        else if (reader == null){
                            fw.close();
                            br.close();
                            fr.close();                        
                            break;                                
                        }
                        else{
                            continue;
                        }                        
                    }
                    else if (h == 0){

                        //If "h" value remains as 0, keep the course, write it to new temp file and continue.
                        fw.write(reader);
                        fw.write(line_sep);                    
                        reader = br.readLine();
                        if ("testnull".equals(reader)){
                            System.out.println("This should not occur, only to handle NullPointerException.");
                        }
                        else if (reader == null){
                            fw.close();
                            br.close();
                            fr.close();                        
                            break;                                
                        }
                        else{
                            continue;
                        }
                    }
                }
                fw.close();
                br.close();
                fr.close();
            }
            else{
                return;
            }
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Unable to delete in Student_Profile_DB.txt "+e, "Error!", JOptionPane.ERROR_MESSAGE);
        }

        //Replacing old file with new file.
        try{
            Files.deleteIfExists(Paths.get("Student_Profile_DB.txt"));
            newTempfile.renameTo(replaceFile);
        }
        catch(NoSuchFileException e) 
        { 
            JOptionPane.showMessageDialog(null, "No such file/directory exists " + e);
        } 
        catch(DirectoryNotEmptyException e) 
        { 
            JOptionPane.showMessageDialog(null, "Directory is not empty " + e);
        } 
        catch(IOException e) 
        { 
            JOptionPane.showMessageDialog(null, "Invalid permissions " + e);
        }
        
        File oldFile2 = new File("Enrollment_List.txt");
        File newTempfile2 = new File("temp_Enrollment_List.txt");
        File replaceFile2 = new File("Enrollment_List.txt");
        
        //Delete from Enrollment_List.txt
        try{

            FileReader fr = new FileReader(oldFile2);
            BufferedReader br = new BufferedReader(fr);
            FileWriter fw = new FileWriter (newTempfile2, true);
            reader = br.readLine();
            while (reader.length() != 0){

                //Use variable h as a flag.
                int h = 0;
                temp = reader.split(",");

                //If Username matches Username to delete in Student_Profile_DB.txt, then set "h" value to 1.
                if (temp[0].equals(s_uName)){
                    h = 1;
                }

                //If "h" value is 1, ignore/delete username.
                if(h == 1){
                    reader = br.readLine();
                    if ("testnull".equals(reader)){
                        System.out.println("This should not occur, only to handle NullPointerException.");
                    }
                    else if (reader == null){
                        fw.close();
                        br.close();
                        fr.close();                        
                        break;                                
                    }
                    else{
                        continue;
                    }                        
                }
                else if (h == 0){

                    //If "h" value remains as 0, keep the course, write it to new temp file and continue.
                    fw.write(reader);
                    fw.write(line_sep);                    
                    reader = br.readLine();
                    if ("testnull".equals(reader)){
                        System.out.println("This should not occur, only to handle NullPointerException.");
                    }
                    else if (reader == null){
                        fw.close();
                        br.close();
                        fr.close();                        
                        break;                                
                    }
                    else{
                        continue;
                    }
                }
            }
            fw.close();
            br.close();
            fr.close();
        }
        catch(Exception e){
            JOptionPane.showMessageDialog(null, "Unable to delete in Student_Profile_DB.txt "+e, "Error!", JOptionPane.ERROR_MESSAGE);
        }

        //Replacing old file with new file.
        try{
            Files.deleteIfExists(Paths.get("Enrollment_List.txt"));
            newTempfile2.renameTo(replaceFile2);
        }
        catch(NoSuchFileException e) 
        { 
            JOptionPane.showMessageDialog(null, "No such file/directory exists " + e);
        } 
        catch(DirectoryNotEmptyException e) 
        { 
            JOptionPane.showMessageDialog(null, "Directory is not empty " + e);
        } 
        catch(IOException e) 
        { 
            JOptionPane.showMessageDialog(null, "Invalid permissions " + e);
        }

        JOptionPane.showMessageDialog(null,"You have successfully deleted student profile.");            
        admin_viewStudProfile vsp = new admin_viewStudProfile(uname);
        vsp.setVisible(true);
        this.dispose();   
    }//GEN-LAST:event_deleteButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(admin_manageStudProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(admin_manageStudProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(admin_manageStudProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(admin_manageStudProfile.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new admin_manageStudProfile().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel backLabel;
    private javax.swing.JLabel backMainLabel;
    private javax.swing.JButton cancelButton;
    private javax.swing.JTable course_t1;
    private javax.swing.JComboBox<String> degreeComboBox;
    private javax.swing.JButton deleteButton;
    private javax.swing.JTextField idText;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JComboBox<String> levelComboBox;
    private javax.swing.JButton manageButton;
    private javax.swing.JTextField nameText;
    private javax.swing.JLabel s_uNameLabel;
    private javax.swing.JLabel usr_label;
    // End of variables declaration//GEN-END:variables
}
